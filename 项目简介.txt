此项目功能有：
          用户的登录 ，登录时的验证码，拦截器，用户的注册。密码的加密，用户的个人资料的修改，密码的修改，头像的上传，收获地址的管理，商品的展示，加入购物车，   购物车显示中商品数量的增加和减少功能、订单的详情，订单的展示。

此项目主要是对持久层、业务层和控制层的编写，在每一个模块内都要根据所需而设计。
持久层：1.持久层的设计和实现对于应用程序的性能和可维护性有着重要的影响。良好的持久层设计可以使应用程序具有更好的可扩展性和可维护性，提高应用程序的性能和稳定性。
             2.此项目中在~~mapper、~~mapper.xml ,文件中体现
             3.记得在设计时记得在启动类上加上@MapperScan 是 MyBatis 框架提供的注解，用于扫描指定包下的 Mapper 接口，并将其注册为 Spring Bean。
业务层：1.业务层的设计和实现对于应用程序的可维护性和可扩展性有着重要的影响。良好的业务层设计可以使应用程序的业务逻辑清晰、模块化，易于维护和扩展。同时，业务层的独立性也使得它可以被不同的表示层共享，提高了应用程序的可重用性。
             2.此项目设计接口。以及接口的实现。
             3.记得在接口的实现类加上@Service 注解，它通常与 @Autowired 注解一起使用，用于依赖注入。当 Spring 容器扫描到一个被 @Service 注解标注的类时，它会自动创建该类的实例，并将其注册为 Spring Bean。在其他组件中，可以通过 @Autowired 注解来注入这些服务层组件的实例，从而使用其提供的服务。
控制层：1.处理用户请求，接收来自表示层的用户请求，解析请求参数，调用业务层处理请求。
             2.协调业务逻辑：与业务层交互，协调业务逻辑的处理过程，处理业务异常。
             3.视图展示：将业务处理结果封装成视图数据，传递给表示层进行展示。
             4.记得在控制层中加上@RestController 注解来标注控制器类，它以便于 Spring MVC 自动扫描并注册这些控制器组件。@RequestMapping 是 Spring MVC 中的注解，用于映射请求路径和请求方法到控制器的处理方法上。在 @RestController 中使用 @RequestMapping 注解来指定控制器处理的请求路径和请求方法。
在此项目中的亮点：
       设计了注册是密码的加密：用的Md5算法，DigestUtils.md5DigestAsHex(salt+password+salt)的方法，用UUID.randomUUID()生成随机的salt盐值，在一个方法中循环3次，进行加密。
       设计了拦截器:  1.定义一个拦截器继承HandlerInterceptor， @Override里面的preHandle方法，在请求处理之前进行拦截和处理。就是当没有登录时其他请求拦截，只有登录成功时才能发送请求。
                             2.在config包下注册一个拦截器，借助WebMvcConfigure接口将用户定义的拦截器进行注册.所以想要注册过滤器需要定义一个类使其实现WebMvcConfigure接口并在其内部添加黑名单(在用户登录的状态下才可以访问的页面资源)和白名单(哪些资源可以在不登录的情况下访问）.
                             3.在该类上使用@Configuration，使其自动加载当前的类并进行拦截器的注册,如果没有@Configuration就相当于没有写类LoginInterceptorConfigure
       登录验证码：  1.使用Kaptcha，它是一个用于生成验证码的java库，用它需要在pom文件中注入它的依赖。
                            2.	在config包下创建一个配置类，@Bean 注解通常用于在配置类中定义一个 bean，并将其添加到 Spring 应用程序上下文中。可以在其他地方注入和使用。
       头像的上传：  1.在控制层继承MultipartFile，是一种在Web开发中用于处理文件上传的数据结构。@RequestParam("file") 前端访问参数保持一致，它表示要从前端请求中获取名为 "file" 的参数的值。
                            2.设置文件类、大小。截取文件substring()是Java中用于截取字符串的方法。它允许你从一个字符串中提取部分内容并返回一个新的字符串  
       在收获地址的创建时： 省、市区、县下拉框的展示。
  
       显示购物车列表：1.创建Value Object,值对象。因为select查询时,查询的结果属于多张表中的内容，不能使用某个POJO实体类来接收。
                                 2.显示订单详情也是如此。
                     
           AOP：  1. 检测项目所有业务层方法的耗时(开始执行时间和结束执行时间只差值),再在不改变项目主体流程代码的前提条件下完成此功能,就要用到AOP，它是面向切面（Aspect）编程。
                       2. 因为AOP不是Spring内部封装的技术,所以需要进行导包操作:在pom.xml文件中添加两个关于AOP的依赖aspectjweaver和aspectjtools。
                       3. 在创建切面类上添加@Aspect(将当前类标记为切面类)和@Component(将当前类的对象创建使用维护交由Spring容器维护) ，
                       4. 使用环绕通知的方式来进行编写，参数ProceedingJoinPoint接口表示连接点,也就是是目标方法的对象
                       5.将当前环绕通知映射到某个切面上,也就是指定连接的点.给around方法添加注解@Around
                       6.  @Around("execution(* com.cy.store.service.impl.*.*(..))")
                                                        第一个*表示方法返回值是任意的
                                                        第二个*表示imp包下的类是任意的
                                                        第三个*表示类里面的方法是任意的
                                                        (…)表示方法的参数是任意的

项目中的其他功能：都是一般的增删改查。仅供参考！！！！！   ------------------小张！！！
   